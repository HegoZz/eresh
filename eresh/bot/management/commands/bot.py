from django.core.management.base import BaseCommand
from django.conf import settings
import logging
import requests

from telegram import (
    Bot, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
)
from telegram.ext import (
    CallbackQueryHandler, CommandHandler, ConversationHandler, Filters,
    MessageHandler, Updater,
)

from bot.models import User


# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

bot = Bot(token=settings.TOKEN)
user_data = {}

g_email, g_password, check = range(3)
URL = 'https://api.eresh.zemedia.ru/'


def cancel(update, context):
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text='–ù—É –æ—Ç–º–µ–Ω–∞ —Ç–∞–∫ –æ—Ç–º–µ–Ω–∞.',
        reply_markup=get_login_reply_keyboard()
    )
    return ConversationHandler.END


def get_inline_keyboard():
    keyboard = [
        [
        InlineKeyboardButton('üí∞üí∞üí∞–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª–∞–Ω—Åüí∞üí∞üí∞',
                             callback_data='check_ballance')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def combine_pair(pair):
    """ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–º–µ–π–ª–∞ –∏ –ø–∞—Ä–æ–ª—è –≤ –≥–µ—Ç-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
    return f'/?email={pair[0]}&passwd={pair[1]}'


def go_login(update, context):
    """ –ó–∞–ø–∏—Å—å –ø–∞—Ä–æ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é."""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=f'{user_data}\n–©–∞ –∫–∞–∫ –≤–æ–π–¥—É. –î–µ—Ä–∂–∏—Å—å —Ç–∞–º.',
    )
    return ConversationHandler.END


def get_login_reply_keyboard():
    keyboard = [
        [
            KeyboardButton('/login'),
            KeyboardButton('/registration'),
        ]
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
    )


def get_email(update, context):
    """ –ó–∞–ø–∏—Å—å –µ–º–µ–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è."""
    user_id = update.message.from_user.id
    user_email = update.message.text
    user_data[user_id] = [user_email,]
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=f'{user_data}\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.',
    )
    return g_password


def get_password(update, context):
    """ –ó–∞–ø–∏—Å—å –ø–∞—Ä–æ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é."""
    user_id = update.message.from_user.id
    user_password = update.message.text
    chat = update.effective_chat
    user_data[user_id].append(user_password)
    context.bot.send_message(
        chat_id=chat.id,
        text=f'{user_data}\n–í—Å—ë –≤–µ—Ä–Ω–æ?\n/yes\n/cancel',
        #entities=[{'length': 20, 'offset': 1, 'type': 'spoiler'}],
    )
    return check


def go_login(update, context):
    """ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥."""
    chat = update.effective_chat
    user_id = update.message.from_user.id
    nickname = update.message.from_user.first_name
    context.bot.send_message(
        chat_id=chat.id,
        text=(f'–ù—É —á—Ç–æ, {nickname}, –¥–µ—Ä–∂–∏—Å—å - —è –≤—Ö–æ–∂—É!\n'
              '(—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º —Å—Ç–æ–∏—Ç—É–¥–∞–ª–∏—Ç—å)'),
    )
    combined_pair = combine_pair(user_data[user_id])
    url = URL + 'login' + combined_pair
    response = requests.get(url).json()
    status = response.get('status')
    if status == 0:
        error = response.get('error')
        context.bot.send_message(
            chat_id=chat.id,
            text=f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n{error}',
        )
        logger.error("–û—à–∏–±–∫–∞: %s", error)
    elif status == 1:
        token = response.get('token')
        vk_id = response.get('vkid')
        log_debug = write_to_base(
            token, user_data[user_id][0], vk_id, user_id, nickname
        )
        context.bot.send_message(
            chat_id=chat.id,
            text=f'–í—Ö–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª–∞–Ω—Å.',
            reply_markup=get_inline_keyboard(),
        )
        logger.debug("–î–∞–Ω–Ω—ã–µ: %s", log_debug)
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text=f'–í–æ–æ–±—â–µ –ª–∞–∂–∞ –∫–∞–∫–∞—è-—Ç–æ...',
        )
    return ConversationHandler.END


def go_reg(update, context):
    """ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    chat = update.effective_chat
    user_id = update.message.from_user.id
    context.bot.send_message(
        chat_id=chat.id,
        text=f'{user_data}\n–©–∞ –∑–∞—Ä–µ–≥–∞—é.',
    )
    combined_pair = combine_pair(user_data[user_id])
    url = URL + 'reg' + combined_pair
    response = requests.get(url).json()
    status = response.get('status')
    if status == 0:
        error = response.get('error')
        context.bot.send_message(
            chat_id=chat.id,
            text=f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n{error}',
        )
        logger.error("–û—à–∏–±–∫–∞: %s", error)
    elif status == 1:
        token = response.get('token')
        context.bot.send_message(
            chat_id=chat.id,
            text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—á—Ç—É.',
            reply_markup=get_login_reply_keyboard(),
        )
        log_debug = token
        logger.debug("–î–∞–Ω–Ω—ã–µ: %s", log_debug)
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text=f'–í–æ–æ–±—â–µ –ª–∞–∂–∞ –∫–∞–∫–∞—è-—Ç–æ...',
        )
    return ConversationHandler.END


def inline_keyboard_handler(update, context, *args, **kwargs):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    data = query.data
    chat_id = update.effective_message.chat_id
    user = User.objects.get(tg_user_id=chat_id)
    token = user.eresh_token
    if data == 'check_ballance':
        url = URL + 'user/getbalance/?token=' + token
        response = requests.get(url).json()
        status = response.get('status')
        if status == 1:
            balance = response.get('balance')
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text='–í–∞—à –±–∞–ª–ª–∞–Ω—Å -- –≤–æ–µ–Ω–Ω–∞—è —Ç–∞–π–Ω–∞.',
            )
        query.edit_message_text(
            text=f'–í–∞—à –±–∞–ª–ª–∞–Ω—Å = {balance}',
            reply_markup=get_inline_keyboard()
        )



def login(update, context):
    """ –ó–∞–ø—Ä–æ—Å –µ–º–µ–π–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞."""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –µ–º–µ–π–ª.\n /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
        reply_markup=ReplyKeyboardRemove(),
    )
    return g_email


def wake_up(update, context):
    """ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç ERESH –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.',
        reply_markup=get_login_reply_keyboard()
    )


def write_to_base(token, mail, vk_id, tg_id, tg_nickname):
    """ –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    User.objects.update_or_create(
        eresh_token=token,
        eresh_email=mail,
        eresh_id=vk_id,
        tg_user_id=tg_id,
        tg_nickname=tg_nickname,
    )


class Command(BaseCommand):
    help = 'Telegram-bot'

    def handle(self, *args, **options):
        updater = Updater(
            bot=bot,
            use_context=True,
        )

        button_handler = CallbackQueryHandler(callback=inline_keyboard_handler)
        login_handler = ConversationHandler(
            entry_points=[CommandHandler('login', login)],
            states={
                g_email: [MessageHandler(Filters.text, get_email)],
                g_password: [MessageHandler(Filters.text, get_password)],
                check:[CommandHandler('yes', go_login)]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )
        registration_handler = ConversationHandler(
            entry_points=[CommandHandler('registration', login)],
            states={
                g_email: [MessageHandler(Filters.text, get_email)],
                g_password: [MessageHandler(Filters.text, get_password)],
                check:[CommandHandler('yes', go_reg)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )
        start = CommandHandler('start', wake_up)

        dp = updater.dispatcher
        dp.add_handler(start)
        dp.add_handler(login_handler)
        dp.add_handler(registration_handler)
        dp.add_handler(button_handler)

        updater.start_polling(poll_interval=10)
        updater.idle()